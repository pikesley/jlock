@import "true";

// fixtures to placate the `import` below
@mixin activated {
  color: red;
}

@mixin deactivated {
  color: blue;
}

@import "../../sass/base/rotator";

@include describe("y-value()") {
  @include it("calculates the y-value for index 0") {
    @include assert-equal(y-value(0, 10vh), 0vh);
  }

  @include it("calculates the y-value for index 25") {
    @include assert-equal(y-value(25, 20vh), -20vh);
  }

  @include it("calculates the y-value for index 50") {
    @include assert-equal(y-value(50, 1vh), 0vh);
  }

  @include it("calculates the y-value for index 75") {
    @include assert-equal(y-value(75, 5vh), 5vh);
  }

  @include it("calculates the y-value for index 100") {
    @include assert-equal(y-value(100, 25vh), 0vh);
  }
}

@include describe("z-value() with default (0) depth") {
  @include it("calculates the z-value for index 0") {
    @include assert-equal(z-value(0, 10vh), -10vh);
  }

  @include it("calculates the z-value for index 25") {
    @include assert-equal(z-value(25, 1vh), 0vh);
  }

  @include it("calculates the z-value for index 50") {
    @include assert-equal(z-value(50, 5vh), 5vh);
  }

  @include it("calculates the z-value for index 75") {
    @include assert-equal(z-value(75, 12vh), 0vh);
  }

  @include it("calculates the z-value for index 100") {
    @include assert-equal(z-value(100, 10vh), -10vh);
  }
}

@include describe("z-value() with specified depth") {
  @include it("calculates the z-value for index 0") {
    @include assert-equal(z-value(0, 10vh, 10vh), 0vh);
  }

  @include it("calculates the z-value for index 25") {
    @include assert-equal(z-value(25, 1vh, 1vh), 1vh);
  }

  @include it("calculates the z-value for index 50") {
    @include assert-equal(z-value(50, 5vh, 5vh), 10vh);
  }

  @include it("calculates the z-value for index 75") {
    @include assert-equal(z-value(75, 12vh, 6vh), 6vh);
  }

  @include it("calculates the z-value for index 100") {
    @include assert-equal(z-value(100, 10vh, 10vh), 0vh);
  }
}

@include describe("rotation()") {
  @include it("calculates the rotation for index 0") {
    @include assert-equal(rotation(0), 0turn);
  }

  @include it("calculates the rotation for index 25") {
    @include assert-equal(rotation(25), -0.25turn);
  }

  @include it("calculates the rotation for index 50") {
    @include assert-equal(rotation(50), -0.5turn);
  }

  @include it("calculates the rotation for index 75") {
    @include assert-equal(rotation(75), -0.75turn);
  }

  @include it("calculates the rotation for index 100") {
    @include assert-equal(rotation(100), -1turn);
  }
}

@include describe("select-include()") {
  @include it("should return `deactivated` for index 0 and `in`") {
    @include assert {
      @include output {
        @include select-include(0, in);
      }

      @include expect {
        @include deactivated;
      }
    }
  }

  @include it("should return `activated` for index 100 and `in`") {
    @include assert {
      @include output {
        @include select-include(100, in);
      }

      @include expect {
        @include activated;
      }
    }
  }

  @include it("should return `activated` for index 0 and `out`") {
    @include assert {
      @include output {
        @include select-include(0, out);
      }

      @include expect {
        @include activated;
      }
    }
  }

  @include it("should return `deactivated` for index 100 and `out`") {
    @include assert {
      @include output {
        @include select-include(100, out);
      }

      @include expect {
        @include deactivated;
      }
    }
  }

  @include it("should return nothing for index 25") {
    @include assert {
      @include output {
        @include select-include(25, in);
      }

      @include expect {
      }
    }
  }
}
