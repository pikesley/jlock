@use "sass:math";
@use "./utils";

$name: rotator;

$tau: math.$pi * 2;

// some defaults

// perspective for the animation transforms. basically how far away we are
$perspective: 40vh;

// how far up and down to go
$y-scale: 10vh;

// how far out (or in) to go
$z-scale: 10vh;

// how many times to rotate
$turns: 1turn;

// how many steps between each keyframe
//
// `$step-size` should divide 100 cleanly or results are undefined
// a `$step-size` of 50 produces a nice effect
// a `$step-size` of 100 makes it rotate in-place
$step-size: 1;

// setting this `true` makes the animation go back into the screen
// note that this may mess with your layout while it's animating
$invert: false;

// set these to the styles you want for your `active` and `inactive` spans
//
// note that this is a *map* of values, not a CSS block
$activated-styles: none;
$deactivated-styles: none;

$timing-function: ease;

////

// how many radians for `$index` (out of 100)
@function radians($index) {
  @return (math.div($tau, 100) * $index) % $tau;
}

// the y-value for `$index` (out of 100)
//
// with no `$scale` supplied, the result is *unitless*
// `$up-first` means `y` goes 0 -> 1 -> 0 -> -1
@function y-value($index, $scale: 1, $up-first: true) {
  $val: math.sin(radians($index)) * $scale;
  @if $up-first {
    $val: 0 - $val;
  }
  @return $val;
}

// the z-value for `$index` (out of 100)
//
// with no `$scale` supplied, the result is *unitless*
// `$offset` pulls the origin forwards (needs units)
// `$start-at-back` means `z` goes -1 -> 0 -> 1 -> 0
@function z-value($index, $scale: 1, $offset: 0, $start-at-back: true) {
  $val: (math.cos(radians($index)) * $scale);
  @if $start-at-back {
    $val: 0 - $val;
  }
  @return $val + $offset;
}

// how much to rotate for `$index`
//
// with no `$turns` supplied, the result is *unitless*
// `$offset` is added to `$index` to modify the rotation relative to the motion
// `$up-first` means this follows the curve of the default motion for the `y` and `z` above
@function rotation($index, $turns: $turns, $offset: 0, $up-first: true) {
  $val: math.div($index + $offset, 100) * $turns;
  @if $up-first {
    $val: 0 - $val;
  }
  @return $val;
}

// select which mixin to include in the frame for `$index` and `$direction`
@mixin select-include($index, $direction) {
  @if $direction == "in" {
    @if $index == 0 {
      @include utils.render-styles($deactivated-styles);
    }
    @if $index == 100 {
      @include utils.render-styles($activated-styles);
    }
  }

  @if $direction == "out" {
    @if $index == 0 {
      @include utils.render-styles($activated-styles);
    }
    @if $index == 100 {
      @include utils.render-styles($deactivated-styles);
    }
  }
}

// generate one frame of animation for `$index` and `$direction`
// `$invert` makes it rotate back into the screen
@mixin one-frame($index, $direction, $invert: $invert) {
  $local-z-scale: $z-scale;
  $offset: $z-scale;
  $local-turns: $turns;

  @if $invert {
    $local-z-scale: 0 - $z-scale;
    $offset: 0 - $z-scale;
    $local-turns: 0 - $turns;
  }

  transform: perspective($perspective)
    translateY(y-value($index, $scale: $y-scale))
    translateZ(z-value($index, $scale: $local-z-scale, $offset: $offset))
    rotateX(rotation($index, $turns: $local-turns));

  @include select-include($index, $direction);
}

// generate a set of frames for `$direction`
//
// I have no fucking idea how to test this
@mixin frame-generator($direction, $step-size: $step-size) {
  @for $i from 0 through 100 {
    @if $i % $step-size == 0 {
      #{$i}% {
        @include one-frame($i, $direction);
      }
    }
  }
}

// generate two @keyframe sets, `rotate-in` and `rotate-out`
//
// `rotate-in` should be applied to things that have just become `active`
// `rotate-out` should be applied to things that have just become `inactive`
@mixin make-frames {
  @each $anim in "in", "out" {
    @keyframes #{$name}-#{$anim} {
      @include frame-generator($anim);
    }
  }
}

// call this from a client to set everything up
@mixin setup($duration: 2s) {
  @include utils.active-inactive($name, $duration, $timing-function);
  @include make-frames;
}
